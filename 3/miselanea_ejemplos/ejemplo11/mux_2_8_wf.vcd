$date
  Fri Mar 27 08:58:04 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module std_logic_arith $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module mux_2_8_tb $end
$var reg 8 ! d0[7:0] $end
$var reg 8 " d1[7:0] $end
$var reg 1 # s $end
$var reg 8 $ y[7:0] $end
$scope module dut $end
$var reg 8 % d0[7:0] $end
$var reg 8 & d1[7:0] $end
$var reg 1 ' s $end
$var reg 8 ( y[7:0] $end
$scope module lsbmux $end
$var reg 4 ) d0[3:0] $end
$var reg 4 * d1[3:0] $end
$var reg 1 + s $end
$var reg 4 , y[3:0] $end
$upscope $end
$scope module msbmux $end
$var reg 4 - d0[3:0] $end
$var reg 4 . d1[3:0] $end
$var reg 1 / s $end
$var reg 4 0 y[3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000 !
b00000000 "
0#
b00000000 $
b00000000 %
b00000000 &
0'
b00000000 (
b0000 )
b0000 *
0+
b0000 ,
b0000 -
b0000 .
0/
b0000 0
#20000000
b11100111 "
b11100111 &
b0111 *
b1110 .
#40000000
1#
b11100111 $
1'
b11100111 (
1+
b0111 ,
1/
b1110 0
#60000000
0#
b00000000 $
0'
b00000000 (
0+
b0000 ,
0/
b0000 0
#80000000
b00111111 !
b00111111 $
b00111111 %
b00111111 (
b1111 )
b1111 ,
b0011 -
b0011 0
#100000000
